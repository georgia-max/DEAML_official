#batch normalizationfrom __future__ import absolute_import, division, print_functionimport kerasimport matplotlib.pyplot as pltimport pandas as pdimport numpy as npimport tensorflow as tfimport statistics as stfrom tensorflow import keras#from tensorflow.python.keras import layersfrom keras import layersfrom keras import modelsfrom sklearn import preprocessingfrom sklearn.preprocessing import  MinMaxScalerdef build_model_2():    model = models.Sequential()    model.add(layers.Dense(50, activation='relu', input_shape=(5,)))    model.add(layers.Dense(25, activation='relu'))    model.add(layers.Dense(1))    model.compile(optimizer='adam',loss='mse',metrics=['mae','mse'])    return modelclass PrintDot(keras.callbacks.Callback):  def on_epoch_end(self, epoch, logs):    if epoch % 100 == 0: print('')    print('.', end='')def plot_history(history):    hist = pd.DataFrame(history.history)    hist['epoch'] = history.epoch    plt.figure(figsize=(12, 8), dpi=200)    csfont = {'fontname': 'Times New Roman'}    #plt.title('Mean Absolute Errors of MLP in TC', fontsize=26, fontweight='bold', fontname='Times New Roman')    plt.tick_params(axis='both', which='major', labelsize=16)    plt.xlabel('Number of Epochs', fontsize=23, **csfont)    plt.ylabel('Mean Absolute Error', fontsize=23, **csfont)    plt.plot(hist['epoch'], hist['mean_absolute_error'],             label='Training Set Error')    plt.plot(hist['epoch'], hist['val_mean_absolute_error'],             label='Validation Set Error')    #plt.ylim([0.060, 0.08])    plt.legend(prop={'size': 20})    #plt.savefig('ANN EPOCHS_MAE.png')    """Root mean square error"""    plt.figure(figsize=(12, 8), dpi=200)    #plt.title('Mean Square Errors of MLP in TC', fontsize=26, fontweight='bold', fontname='Times New Roman')    plt.tick_params(axis='both', which='major', labelsize=16)    plt.xlabel('Number of Epochs', fontsize=23, **csfont)    plt.ylabel('Mean Square Error', fontsize=23, **csfont)    #rmse = np.sqrt(hist['mean_squared_error'])    plt.plot(hist['epoch'], hist['mean_squared_error'],             label='Training Set Error')    #rmse_val = np.sqrt(hist['val_mean_squared_error'])    plt.plot(hist['epoch'], hist['val_mean_squared_error'],             label='Validation Set Error')    #plt.ylim([0.008, 0.012])    plt.legend(prop={'size': 20})    #plt.savefig('ANN EPOCHS_RMSE.png')    plt.show()